package com.chasel.common.service.impl;

import java.io.IOException;
import java.io.InputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.xmlpull.v1.XmlPullParserException;

import com.chasel.common.config.MinioConfiguration;
import com.chasel.common.service.IExportBaseService;
import com.chasel.common.service.IMinioService;
import com.chasel.common.util.IoUtils;

import io.minio.MinioClient;
import io.minio.errors.ErrorResponseException;
import io.minio.errors.InsufficientDataException;
import io.minio.errors.InternalException;
import io.minio.errors.InvalidArgumentException;
import io.minio.errors.InvalidBucketNameException;
import io.minio.errors.InvalidEndpointException;
import io.minio.errors.InvalidExpiresRangeException;
import io.minio.errors.InvalidPortException;
import io.minio.errors.NoResponseException;

@Service
public class MinioService implements IMinioService {

	@Autowired
	private MinioConfiguration minioConfig;

	@Autowired
	private IExportBaseService exportBaseService;

	private MinioClient minioClient;

	@Override
	public void upload(MultipartFile file) {
		try {

			minioClient = getMinioClient();
			minioClient.putObject(minioConfig.getBucket(), file.getOriginalFilename(), file.getInputStream(),
					file.getSize(), file.getContentType());
			minioClient.traceOff();
		} catch (InvalidKeyException e) {
			e.printStackTrace();
		} catch (InvalidBucketNameException e) {
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (InsufficientDataException e) {
			e.printStackTrace();
		} catch (NoResponseException e) {
			e.printStackTrace();
		} catch (ErrorResponseException e) {
			e.printStackTrace();
		} catch (InternalException e) {
			e.printStackTrace();
		} catch (InvalidArgumentException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (XmlPullParserException e) {
			e.printStackTrace();
		}
	}

	@Override
	public String getUrl(String uri) {
		try {
			minioClient = getMinioClient();
			return minioClient.presignedGetObject(minioConfig.getBucket(), uri);
		} catch (InvalidKeyException e) {
			e.printStackTrace();
		} catch (InvalidBucketNameException e) {
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (InsufficientDataException e) {
			e.printStackTrace();
		} catch (NoResponseException e) {
			e.printStackTrace();
		} catch (ErrorResponseException e) {
			e.printStackTrace();
		} catch (InternalException e) {
			e.printStackTrace();
		} catch (InvalidExpiresRangeException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (XmlPullParserException e) {
			e.printStackTrace();
		}
		;
		return null;
	}

	@Override
	public void download(String uri) {
		try {
			InputStream is = getInputStream(uri);
			byte[] bytes = IoUtils.toByteArrayL(is);
			exportBaseService.downloadFile(bytes, uri.substring(uri.lastIndexOf("/") + 1, uri.length()));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public InputStream getInputStream(String uri) {

		try {
			minioClient = getMinioClient();
			return minioClient.getObject(minioConfig.getBucket(), uri);
		} catch (InvalidKeyException e) {
			e.printStackTrace();
		} catch (InvalidBucketNameException e) {
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (InsufficientDataException e) {
			e.printStackTrace();
		} catch (NoResponseException e) {
			e.printStackTrace();
		} catch (ErrorResponseException e) {
			e.printStackTrace();
		} catch (InternalException e) {
			e.printStackTrace();
		} catch (InvalidArgumentException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (XmlPullParserException e) {
			e.printStackTrace();
		}
		;
		return null;
	}

	public MinioClient getMinioClient() {
		try {
			minioClient = new MinioClient(minioConfig.getUrl() + ":" + minioConfig.getSort(),
					minioConfig.getAccesskey(), minioConfig.getSecretkey());
			return minioClient;
		} catch (InvalidEndpointException e) {
			e.printStackTrace();

		} catch (InvalidPortException e) {
			e.printStackTrace();
		}
		return minioClient;
	}

	@Override
	public void remove(String uri) {
		try {
			minioClient = getMinioClient();
			minioClient.removeObject(minioConfig.getBucket(), uri);
		} catch (InvalidKeyException e) {
			e.printStackTrace();
		} catch (InvalidBucketNameException e) {
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (InsufficientDataException e) {
			e.printStackTrace();
		} catch (NoResponseException e) {
			e.printStackTrace();
		} catch (ErrorResponseException e) {
			e.printStackTrace();
		} catch (InternalException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (XmlPullParserException e) {
			e.printStackTrace();
		}

	}

}
