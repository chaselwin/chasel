package com.chasel.family.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.chasel.common.util.HttpRestRequest;
import com.chasel.family.service.IUserService;
import com.chasel.family.vo.User;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

@RestController
@RequestMapping("/user")
public class UserController {

	@Autowired
	private IUserService userService;

	@RequestMapping(path = "/test", method = RequestMethod.GET, produces = "application/json")
	public @ResponseBody Object test() {
		String url = "http://127.0.0.1:8090/family/user/findUser/26";
		String data = HttpRestRequest.sendGet(url);
		return data;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping(path = "/download", consumes = "application/x-www-form-urlencoded;charset=UTF-8", method = RequestMethod.POST, produces = "application/json")
	public @ResponseBody String downloadFile(HttpServletResponse response, @RequestBody Map<String, Object> map)
			throws JSONException, IOException {
		String materielType = map.get("materielType").toString();
		List list = (List) map.get("ids");
		Map<String, String> map2 = (Map<String, String>) map.get("selections");
		System.out.println(materielType);
		for (Object object : list) {
			System.out.println(object);
		}
		Set<Entry<String, String>> entrySet = map2.entrySet();
		for (Entry<String, String> entry : entrySet) {
			System.out.println(entry.getKey());
			System.out.println(entry.getValue());
		}
		System.out.println();
		File file = new File("C:/Users/chasel/Desktop/111.txt");
		FileInputStream is = new FileInputStream(file);
		byte[] buffer = new byte[is.available()];
		is.read(buffer);
		is.close();
		// 清空response
		response.reset();
		// 设置response的Header
		response.addHeader("Content-Disposition", "attachment;filename=" + new String("111.txt"));
		response.addHeader("Content-Length", "" + file.length());
		OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
		response.setContentType("application/octet-stream");
		toClient.write(buffer);
		toClient.flush();
		toClient.close();
		return new JSONObject().put("message", "success").toString();
	}

	/**
	 * 分页查询
	 * 
	 * @return
	 */
	@RequestMapping(path = "/list/page/{pageSize}/{pageNum}", method = RequestMethod.POST, produces = "application/json")
	public @ResponseBody PageInfo<User> findAll(@RequestBody User user, PageInfo<User> pageInfo) {
		PageHelper.startPage(pageInfo.getPageNum(), pageInfo.getPageSize());
		List<User> list = userService.findAll(user);
		return new PageInfo<User>(list);
	}

	/**
	 * 添加用户
	 * 
	 * @param user
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(path = "/add", method = RequestMethod.POST, produces = "application/json")
	public @ResponseBody String save(@RequestBody @Validated @Valid User user) throws Exception {
		userService.save(user);
		return new JSONObject().put("message", "save success").toString();
	}

	/**
	 * 删除用户
	 * 
	 * @param id
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(path = "/delete/{id}", method = RequestMethod.DELETE, produces = "application/json")
	public @ResponseBody String delete(@PathVariable @Validated @Valid int id) {
		if (userService.findById(id) == null) {
			return "{\"message\":\"the id '" + id + "' is not exist.\"}";
		} else {
			userService.delete(id);
			return "{\"message\":\"delete success\"}";
		}
	}

	/**
	 * 编辑用户
	 * 
	 * @param user
	 * @return
	 */
	@RequestMapping(path = "/update", method = RequestMethod.PUT, produces = "application/json")
	public @ResponseBody String update(@RequestBody @Validated @Valid User user) {
		if (userService.findById(user.getId()) == null) {
			return "{\"message\":\"the user is not exist.\"}";
		} else {
			userService.update(user);
			return "{\"message\":\"update success\"}";
		}
	}

	/**
	 * 根据id查询用户
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(path = "/findUser/{id}", method = RequestMethod.GET, produces = "application/json")
	public @ResponseBody List<User> findById(@PathVariable int id) {
		User user = userService.findById(id);
		List<User> list = new ArrayList<>();
		list.add(user);
		return list;
	}

}
